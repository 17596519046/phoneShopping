<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rich.mapper.LoginMapper">

    <select id="selectUserCount" resultType="int">
        select count(*) from login_user
        where login_name = #{loginName}
        <if test="userPhone != null and userPhone != ''">
            and user_phone = #{userPhone}
        </if>
    </select>

    <insert id="insertEvaluate">
        insert into evaluate_inner
        (inner_remark,goods_id,user_id,create_time,update_time)
        VALUES
        (#{innerRemark}  ,#{goodsId} ,#{userId} ,#{createTime} ,#{updateTime} )
    </insert>

    <select id="selectEvaluate" resultType="com.rich.pojo.EvaluateInnerVO">
        select e.*,s.user_name userName from evaluate_inner e
        LEFT JOIN system_user s on s.id = e.user_id
        where goods_id = #{goodsId}
    </select>

    <select id="selectUserInfo" resultType="com.rich.pojo.SystemUser">
        select * from login_user
        where login_name = #{loginName}
    </select>

    <insert id="insertUserInfo">
        INSERT INTO login_user
         (login_name, login_password, user_email, user_phone, create_time, update_time, role_id, status) VALUES
         (#{loginName}  ,#{loginPassword}  ,#{userEmail}   ,#{userPhone}  ,#{createTime} ,#{updateTime} ,#{roleId},0 )
    </insert>

    <insert id="insertAddressInfo">
        insert INTO address_info (userId, receivePhone, province, city, area, detailsAddress, isDefault, addressLabel, createAddressLabel) VALUES
        (#{userId} ,#{receivePhone} ,#{province} ,#{city} ,#{area} ,#{detailsAddress} ,#{isDefault} ,#{addressLabel} ,#{createAddressLabel} )
    </insert>

    <update id="updateAddressInfo">
        UPDATE address_info set receivePhone = #{receivePhone} ,province = #{province} ,city = #{city} ,area = #{area} ,detailsAddress = #{detailsAddress}
         ,isDefault = #{isDefault} ,createAddressLabel = #{createAddressLabel},addressLabel = #{addressLabel}   where id  = #{id}
    </update>

    <update id="updateDefaultAddress">
        UPDATE address_info set isDefault = 0 where userId = #{userId} and id != #{id}
    </update>

    <delete id="deleteAddressInfo">
        DELETE from address_info where id = #{id}
    </delete>

    <select id="selectListAddress" resultType="com.rich.pojo.AddressInfo">
        SELECT * from address_info where userId = #{id}
    </select>

    <select id="selectAddressInfo">
        SELECT * from address_info where id = #{id}
    </select>

    <select id="selectAddressMyself" resultType="com.rich.pojo.AddressInfo">
        select * from address_info where userId = #{userId} and isDefault = 1
    </select>

    <update id="updatePasswordInfo">
        UPDATE system_user set password = #{password}
        where user_name = #{userName} and phone = #{phone}
    </update>

    <select id="selectAllProductInfo" resultType="com.rich.pojo.Goods">
        select * from product p
        <where>
            <if test="productName != null and productName != ''">
                and p.product_name like CONCAT('%',#{productName},'%')
            </if>
            <if test="productArea != null and productArea != ''">
                and p.product_area = #{productArea}
            </if>
        </where>
    </select>

    <select id="selectCityInfo" resultType="com.rich.pojo.Goods">
        select area from goods group by area
    </select>

    <update id="updateMyself">
        update system_user set password = #{password} ,phone = #{phone} ,email = #{email}
        where user_name = #{userName}
    </update>

    <insert id="insertBuyCar">
        insert into buy_car
        (num, goods_id, user_id, create_time, update_time)
        VALUES
        (#{num} ,#{goodsId} ,#{userId} ,#{createTime} ,#{updateTime} )
    </insert>

    <select id="selectBuyCarInfo" resultType="com.rich.vo.BuyCarInfo">
        select b.order_id orderId,b.id id,g.name goodsName,g.img img,g.price price,b.num num from buy_car b
        left join goods g on g.id =b.goods_id where b.user_id = #{userId} and order_id is null
    </select>

    <select id="selectOrderInfo" resultType="com.rich.vo.BuyCarInfo">
        select g.id goodsId,ai.province,ai.city,ai.area,ai.detailsAddress,b.order_id orderId,b.id id,g.name goodsName,g.img img,g.price price,b.num num from buy_car b
        left join goods g on g.id =b.goods_id
        LEFT join order_info o on b.order_id = o.id
        LEFT JOIN address_info ai on ai.id = o.address_info_id
        where b.user_id = #{userId} and order_id is not null
    </select>

    <delete id="deleteBuyCar">
        DELETE from buy_car where id = #{id}
    </delete>

    <insert id="insertOrderInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into order_info
        (goods_id, num, address_info_id, orderCode, orderStatus, price)
        VALUES
        (#{goodsId} ,#{num} ,#{addressInfoId}  ,#{orderCode} ,#{orderStatus} ,#{price}  )

    </insert>

    <update id="updateBatchList" parameterType="list" >
        <foreach collection="list" item="item" separator=";">
            update buy_car
            <set>
                <if test="item.orderId != 0">
                    order_id = #{item.orderId},
                </if>
            </set>
            where id = #{item.id} and order_id is null
        </foreach>
    </update>

</mapper>