<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rich.mapper.LoginMapper">

    <select id="selectUserCount" resultType="int">
        select count(*) from login_user
        where login_name = #{loginName}
        <if test="userPhone != null and userPhone != ''">
            and user_phone = #{userPhone}
        </if>
    </select>

    <insert id="insertEvaluate">
        insert into evaluate_inner
        (inner_remark,goods_id,user_id,create_time,update_time)
        VALUES
        (#{innerRemark}  ,#{goodsId} ,#{userId} ,#{createTime} ,#{updateTime} )
    </insert>

    <select id="selectEvaluate" resultType="com.rich.pojo.EvaluateInnerVO">
        select e.*,s.user_name userName from evaluate_inner e
        LEFT JOIN system_user s on s.id = e.user_id
        where goods_id = #{goodsId}
    </select>

    <select id="selectUserInfo" resultType="com.rich.pojo.User">
        select * from login_user
        where login_name = #{loginName}
    </select>

    <insert id="insertUserInfo">
        INSERT INTO login_user
         (login_name, login_password, user_email, user_phone, create_time, update_time, role_id, status) VALUES
         (#{loginName}  ,#{loginPassword}  ,#{userEmail}   ,#{userPhone}  ,#{createTime} ,#{updateTime} ,#{roleId},0 )
    </insert>

    <insert id="insertAddressInfo">
        insert INTO address_info (userId, receivePhone, province, city, area, detailsAddress, isDefault, addressLabel, createAddressLabel) VALUES
        (#{userId} ,#{receivePhone} ,#{province} ,#{city} ,#{area} ,#{detailsAddress} ,#{isDefault} ,#{addressLabel} ,#{createAddressLabel} )
    </insert>

    <update id="updateAddressInfo">
        UPDATE address_info set receivePhone = #{receivePhone} ,province = #{province} ,city = #{city} ,area = #{area} ,detailsAddress = #{detailsAddress}
         ,isDefault = #{isDefault} ,createAddressLabel = #{createAddressLabel},addressLabel = #{addressLabel}   where id  = #{id}
    </update>

    <update id="updateDefaultAddress">
        UPDATE address_info set isDefault = 0 where userId = #{userId} and id != #{id}
    </update>

    <delete id="deleteAddressInfo">
        DELETE from address_info where id = #{id}
    </delete>

    <select id="selectListAddress" resultType="com.rich.pojo.AddressInfo">
        SELECT * from address_info where userId = #{id}
    </select>

    <select id="selectAddressInfo">
        SELECT * from address_info where id = #{id}
    </select>

    <select id="selectAddressMyself" resultType="com.rich.pojo.AddressInfo">
        select * from address_info where userId = #{userId} and isDefault = 1
    </select>

    <update id="cancelOrder">
        update order_info
        set orderStatus = 2
        where id = #{id}
    </update>

    <update id="updatePasswordInfo">
        UPDATE system_user set password = #{password}
        where user_name = #{userName} and phone = #{phone}
    </update>

    <select id="selectAllProductInfo" resultType="com.rich.pojo.Goods">
        select * from product p
        <where>
            <if test="productName != null and productName != ''">
                and p.product_name like CONCAT('%',#{productName},'%')
            </if>
            <if test="typeId != null">
                and p.type_id = #{typeId}
            </if>
        </where>
    </select>


    <update id="updateMyself">
        update login_user set login_password = #{loginPassword}  ,user_phone = #{userPhone}  ,user_email = #{userEmail}
        where login_name = #{loginName}
    </update>

    <select id="selectProductType" resultType="com.rich.pojo.Goods">
        select pt.name productType,pt.id typeId from product p
        left join product_type pt on pt.id = p.type_id
        group by pt.name,pt.id
    </select>

    <insert id="insertGoodsCar">
        insert into goods_car
        (buy_num, product_id, user_id, create_time, update_time)
        VALUES
        (#{buyNum}  ,#{productId}  ,#{userId} ,#{createTime} ,#{updateTime} )
    </insert>

    <select id="selectGoodsCarInfo" resultType="com.rich.vo.GoodsCarInfo">
        select g.order_id orderId,g.id id,p.product_name productName,p.product_img productImg,p.product_price,g.buy_num buyNum from goods_car g
        left join product p on p.id =g.product_id where g.user_id = #{userId} and order_id is null
    </select>

    <select id="selectOrderDetail" resultType="com.rich.vo.GoodsCarInfo">
       select a.detailsAddress detailsAddress,a.province,a.city,a.area area,g.order_id orderId,g.id id,p.product_name productName,p.product_img productImg,p.product_price,g.buy_num buyNum from goods_car g
        left join product p on p.id =g.product_id
        LEFT JOIN order_info o on o.id = g.order_id
        left join address_info a on a.id = o.address_info_id
         where g.order_id = #{orderId}
    </select>

    <select id="selectOrderInfo" resultType="com.rich.vo.OrderInfoVO">
       select o.orderStatus,a.detailsAddress detailsAddress,a.province,a.city,a.area area,
       o.id orderId,o.orderCode orderCode,o.price price
       from order_info o
        left join address_info a on a.id = o.address_info_id
         where o.user_id = #{userId}
    </select>

    <delete id="deleteGoodsCar">
        DELETE from goods_car where id = #{id}
    </delete>

    <insert id="insertOrderInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into order_info
        (goods_id, num, address_info_id, orderCode, orderStatus, price,user_id)
        VALUES
        (#{goodsId} ,#{num} ,#{addressInfoId}  ,#{orderCode} ,#{orderStatus} ,#{price},#{userId}   )

    </insert>

    <update id="updateBatchList" parameterType="list" >
        <foreach collection="list" item="item" separator=";">
            update goods_car
            <set>
                <if test="item.orderId != 0">
                    order_id = #{item.orderId},
                </if>
            </set>
            where id = #{item.id} and order_id is null
        </foreach>
    </update>

</mapper>
